'''
元组:
数据结构, 可以有多个数据,多种数据类型. 不可变数据类型. 元组一旦初始化,不可以再被修改.
表示:
(),小括号里面保存元组的元素, 可以是多个,元素和元素之间有逗号分隔开.
例空元祖: ()
例非元祖: (1,3,5,7,9,11)

序列:
定义:字符串、列表和元组都是序列. 序列在内存中,它的元素是顺序存储.
索引(下标): 可以通过列表的索引下标来获取到列表中的元素. 例: li[3]
切片: 对列表的部分或全部元素的复制. 写法: li[start:end:step]
start: 开始值, 可以取到,默认为0,为0时可以省.
end: 结束值, 取不到, 默认是最后一个元素的索引+1, 可以省.
step: 步长值, 默认为1,可以不写.
li[:]: 全盘复制.
li[::-1]: 逆序输出全盘复制的结果.

+: 序列中把两个序列拼接到一起
tips:列表和列表拼接, 字符串和字符串拼接,元祖和元祖拼接
*: 把序列复制多少遍.
tips: *后一定跟的是int,不能是其它数据类型.

不可变数据类型.
元组中的元素一旦初始化后,不允许被改变, 所以增删改是不允许的,只允许查.

查:
知道索引查值:  li[index]
知道值查索引:
index():  传参,传入要查找的值, 返回对应的索引. 缺陷: 第一个找到了,就不会往后找.
传入要查找的值,传入查找的位置(起始位置和终止位置).
count(): 传参,传入要查找的值, 返回找到的次数.
判断:
in:      判断某个元素在这个元组中     ---True
not in:  判断某个元素不在这个元组中    ---True

元组中元素的遍历:
for循环的第一种格式:
for i in list:
    只能知道值:
    i
    执行语句

for i in range(len(li)):
    第一:知道索引
    i
    第二:知道值
    li[i]

特有的函数:
len(): 计算序列中的元素个数.
sorted(): 数值型的数据, 从小到大的顺序排.  列表不会被改变. 产生一个排序的结果.
max(): 从列表中取最大值. 不改变元组本身
min(): 从列表中取最小值. 不改变元组本身
'''

tup1 = (1,2,3,4,2,1,6,9,8,7)
tup2 = (4,5,6)
# print(tup1+tup2)
# print(tup1*3)
# print(tup2*4)
# tup1[1] = 11  #报错 TypeError: 'tuple' object does not support item assignment
# print(tup1[1])
# print(tup1.index(3))
# print(tup1.count(3))
# print(11 in tup1)
# print(22 not in tup2)

# for i in tup1:
#     print(i)

# for i in range(len(tup1)):
#     print('第%d个元素是:%d'%(i,tup1[i]))

# li = [1,2,3,4,2,1,6,9,8,7]
# li.sort()
# print(li)

# tup1.sort()
# tup1.reverse() #均不支持,都会修改元祖中的元素的索引.

# print(sorted(tup1))
# print(tup1)
# print(max(tup1))
# print(min(tup1))